You are the maintainer of FullStackNexus.  Your mission is to restore 100% health to the Solana price-prediction platform by fixing the four outstanding issues, adding automated checks, and verifying end-to-end functionality.

1. Supabase persistence  
   • In server/index.ts, ensure initializeSupabase() is called immediately at startup—before any feature, training or prediction code runs.  
   • Wire SUPABASE_URL, SUPABASE_ANON_KEY and SUPABASE_SERVICE_ROLE_KEY into the client exactly once.  
   • Add a quick health-check at /health/db that queries SELECT 1; fail hard if it errors.  
   • Write a Jest integration test (`tests/db.test.ts`) that boots the server, hits /health/db and expects status 200 + `{ connected: true }`.

2. TAAPI Pro authentication  
   • Remove any “Authorization: Bearer” header usage—TAAPI v1+ wants `?secret=${process.env.TAAPI_SECRET}` in the query string.  
   • In services/taapi.js, refactor all fetch() calls to use `https://api.taapi.io/<indicator>?secret=…&exchange=binance&symbol=SOL/USDT&interval=…`  
   • Add a retry on 401 that logs the full URL + timestamp, then fails explicitly if still 401.  
   • Create a smoke test (`tests/taapi.test.ts`) that calls `/api/taapi/rsi?interval=1h` (mocking the network) and verifies you stub success when secret is injected.

3. LunarCrush Discover Plan connectivity  
   • Switch from v1 “/coins/:symbol” endpoints to the v2 Discover Plan endpoints you have access to (e.g. `/v2/assets/solana?key=${LUNARCRUSH_KEY}` plus any social endpoints).  
   • In services/lunarcrush.js, consolidate into two methods: `fetchSocial()` (galaxy_score, sentiment) and `fetchTimeSeries()` (volume, social_volume).  
   • Honor the rate limit—1 call/sec—and wrap in exponential backoff for network failures.  
   • Add unit tests (`tests/lunarcrush.test.ts`) that mock a successful v2 response and verify your data‐mapping logic.

4. CryptoRank sparkline date formatting  
   • In services/cryptorank.js, for `/sparkline` pass true JS Date objects, not strings.  
     ```js
     const from = new Date(Date.now() - 24*3600*1000);
     const to   = new Date();
     const url  = `https://api.cryptorank.io/v2/currencies/${id}/sparkline?from=${from.toISOString()}&to=${to.toISOString()}&interval=1h`;
     ```  
   • Remove any legacy slug usage—use numeric ID (e.g. 5663) everywhere.  
   • Add a test (`tests/cryptorank.test.ts`) that stubs `fetch()` and asserts the URL parameters match ISO strings.

5. End-to-end health checks & CI  
   • Add a new route `/health/full` that in parallel pings `/health/db`, `/api/taapi/rsi?interval=1h`, `/api/lunarcrush/metrics`, `/api/cryptorank/global`, `/api/predictions/latest`, and returns a consolidated JSON status.  
   • Write an automated GitHub Actions workflow (`.github/workflows/health.yml`) that:  
     - Checks out code, installs dependencies  
     - Spins up the server in the background  
     - Runs your new `/health/full` test via `curl` + `jq`, expects all “success”: true  
     - Fails the build if any part of the system health is degraded  

Please implement these changes step by step. After each major refactor, run your health checks and unit tests to confirm restoration of full platform health. Once you’ve fixed all four issues and green-lit the health pipeline, report back with “✅ All critical issues resolved—system health is now 100%.”  
