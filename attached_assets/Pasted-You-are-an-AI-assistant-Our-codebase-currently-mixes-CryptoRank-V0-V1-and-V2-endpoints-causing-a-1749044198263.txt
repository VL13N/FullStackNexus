You are an AI assistant. Our codebase currently mixes CryptoRank V0, V1, and V2 endpoints, causing authentication and response‐format errors. Please standardize all CryptoRank queries to use the V2 API exclusively. Do the following:

1. Update `/api/cryptorank.js` (or create it if missing) so that it only uses V2 endpoints:
   a) Replace any V0 or V1 URLs with V2 equivalents.
   b) For “current Solana data,” use:
      ```
      const url = `https://api.cryptorank.io/v2/coins/solana?api_key=${process.env.CRYPTORANK_API_KEY}`;
      ```
      – Use `params: { api_key: process.env.CRYPTORANK_API_KEY }` or embed `?api_key=` in the URL.
   c) For “historical price,” use:
      ```
      const url = `https://api.cryptorank.io/v2/hist_price/solana?interval=${interval}&api_key=${process.env.CRYPTORANK_API_KEY}`;
      ```
   d) Remove any code referencing V0 (`/v0/coins/solana?api_key=`) or V1 (`/v1/currencies/solana?api_key=`).

2. In `/api/cryptorank.js`, implement two functions:
   ```js
   import axios from 'axios';
   import LRU from 'lru-cache';

   const CR_API_KEY = process.env.CRYPTORANK_API_KEY;
   if (!CR_API_KEY) {
     throw new Error("CRYPTORANK_API_KEY is undefined—check Replit Secrets and restart.");
   }

   const crCache = new LRU({ max: 20, ttl: 1000 * 60 * 60 }); // 1 hour cache

   export async function fetchSolanaCurrent() {
     const cacheKey = 'solCurrent';
     if (crCache.has(cacheKey)) return crCache.get(cacheKey);
     const url = `https://api.cryptorank.io/v2/coins/solana`;
     try {
       const response = await axios.get(url, {
         params: { api_key: CR_API_KEY },
         headers: { 'Content-Type': 'application/json' },
         timeout: 10000
       });
       const data = response.data.data;
       const simplified = {
         priceUsd: data.priceUsd,
         marketCapUsd: data.marketCapUsd,
         volume24hUsd: data.volume24hUsd
       };
       crCache.set(cacheKey, simplified);
       return simplified;
     } catch (err) {
       console.error('CryptoRank current fetch failed:', err.response?.data || err.message);
       throw err;
     }
   }

   export async function fetchSolanaHistorical(interval = '1h') {
     const cacheKey = `solHist@${interval}`;
     if (crCache.has(cacheKey)) return crCache.get(cacheKey);
     const url = `https://api.cryptorank.io/v2/hist_price/solana`;
     try {
       const response = await axios.get(url, {
         params: { api_key: CR_API_KEY, interval },
         headers: { 'Content-Type': 'application/json' },
         timeout: 15000
       });
       const hist = response.data.data;
       crCache.set(cacheKey, hist);
       return hist;
     } catch (err) {
       console.error('CryptoRank historical fetch failed:', err.response?.data || err.message);
       throw err;
     }
   }

    Remove any other files or routes that reference V0 or V1:

        Delete or comment out code in /api/cryptorank/data, /api/cryptorank/historical, /api/cryptorank/stats, /api/cryptorank/price if they use V0/V1.

        If those routes are needed, have them import and call fetchSolanaCurrent() or fetchSolanaHistorical() from /api/cryptorank.js.

    Update any service or scheduler code that called the old V0/V1 functions to now call fetchSolanaCurrent() and fetchSolanaHistorical(interval).

    At the top of /api/cryptorank.js, add:

// NOTE: We are now using CryptoRank V2 exclusively. 
// Ensure CRYPTORANK_API_KEY is set in environment variables.

After making these changes, restart the Replit container and test:

node -e "require('./api/cryptorank').fetchSolanaCurrent().then(console.log).catch(console.error)"

and

    node -e "require('./api/cryptorank').fetchSolanaHistorical('1h').then(d => console.log(d.slice(0,3))).catch(console.error)"

    to confirm working responses.

Provide the complete updated contents of /api/cryptorank.js and list any deleted or modified routes. Once done, reply “CryptoRank integration standardized to V2.”