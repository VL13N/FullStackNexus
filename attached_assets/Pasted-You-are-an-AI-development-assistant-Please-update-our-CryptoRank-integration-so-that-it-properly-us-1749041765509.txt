You are an AI development assistant. Please update our CryptoRank integration so that it properly uses my paid CryptoRank V2 API key and never fails to fetch data. Specifically:

1. **Environment Variable**  
   - Ensure we read `process.env.CRYPTORANK_API_KEY`. If it’s missing, immediately throw an error.

2. **Correct Endpoints & Axios Fetchers**  
   - Create or update `/api/cryptorank.js` with two functions:

     a) `fetchSolanaCurrent(): Promise<{ priceUsd: number, marketCapUsd: number, volume24hUsd: number }>`  
       – Uses Axios to GET `https://api.cryptorank.io/v2/coins/solana?api_key=${process.env.CRYPTORANK_API_KEY}`.  
       – If response is `200 OK`, return an object extracting `{ priceUsd, marketCapUsd, volume24hUsd }` from `response.data.data`.  
       – If you receive HTTP 401 or `{ “error”: “…Invalid API key…” }`, log `err.response.data` and rethrow.

     b) `fetchSolanaHistorical(interval: string = "1h"): Promise<Array<{ date: number, open: number, high: number, low: number, close: number, volume: number }>>`  
       – Uses Axios to GET `https://api.cryptorank.io/v2/hist_price/solana?interval=${interval}&api_key=${process.env.CRYPTORANK_API_KEY}`.  
       – If successful, return `response.data.data` (an array).  
       – If HTTP 401 or other error, log `err.response.data` and rethrow.

3. **Caching Layer**  
   - Install `lru-cache`.  
   - At the top of `/api/cryptorank.js`, add:
     ```
     import LRU from "lru-cache";
     const crCache = new LRU({ max: 20, ttl: 1000 * 60 * 60 }); // 1 hour
     ```
   - In `fetchSolanaCurrent`, use cache key `"solCurrent"`. Return cached value if present; otherwise fetch and cache it.  
   - In `fetchSolanaHistorical`, use cache key `"solHist@${interval}"`. Return cached value if present; otherwise fetch and cache it.

4. **Move All Calls to Backend**  
   - Confirm you are not calling `fetchSolanaCurrent()` or `fetchSolanaHistorical()` directly from React. If so, redirect those calls into a new file called `/services/dataService.js` that imports from `/api/cryptorank.js`. The frontend should only request via your own `/api/` routes, never directly to CryptoRank.

5. **Example Usage in Scheduler or Data Pipeline**  
   - In `/services/fetchAndNormalize.js`, replace previous CryptoRank fetch logic with calls to `fetchSolanaCurrent()` and `fetchSolanaHistorical("1h")` as needed.  

Add comments at the top of `/api/cryptorank.js` stating:  
