You are our Replit AI assistant. We need you to harden our Solana predictor app by adding comprehensive logging, error-handling, and health-monitoring. Please implement the following:

1. **Detailed API & DB Logging**  
   - In every service module (services/taapi.js, services/lunarcrush.js, services/cryptoRank.js, services/onchain.js):
     - Log each outgoing request (endpoint, params, timestamp).  
     - Log each response status and body (or error).  
   - In our Supabase wrapper (DatabaseManager or wherever we call supabase.from().insert/upsert()):
     - Log the table name, payload, and returned error or success.

2. **Null-/Error-Safe ML Routes**  
   - In `/api/ml/predict` and `/api/ml/train` handlers:
     - Check for “featureVector” existence and length before calling `model.predict` or `model.fit`.  
     - If missing or invalid, return `400 { success:false, error:"Missing or invalid feature data for ML" }`.  
   - Wrap all `await` calls in `try/catch` and never allow an uncaught exception to bubble up.

3. **Decouple ML from Core API Pipeline**  
   - Move ML training/prediction logic into a separate Express Router (e.g. `routes/ml.js`).  
   - Ensure that errors in ML routes do not crash or block TAAPI/LunarCrush/CryptoRank routes.  
   - Confirm core data-fetch routes (`/api/taapi/*`, `/api/lunarcrush/*`, `/api/cryptorank/*`) always return JSON, even if ML errors occur elsewhere.

4. **Health-Monitoring Endpoint**  
   - Create `GET /api/health/internal` that:
     - Calls each service’s “ping” or minimal fetch (e.g. TAAPI simple RSI, LunarCrush basic coin info, CryptoRank global).  
     - Calls a dummy Supabase read/write check (e.g. insert a test row and then delete it).  
     - Returns a JSON object with status for each:  
       ```json
       {
         "taapi": { "ok": true, "latencyMs": 45 },
         "lunarcrush": { "ok": true, "latencyMs": 120 },
         "cryptorank": { "ok": false, "error": "401 Unauthorized" },
         "supabase": { "ok": true, "error": null }
       }
       ```

5. **Retry & Fallback Logic**  
   - Where rate-limit (429) or transient errors occur, retry with exponential backoff (up to 3 attempts).  
   - If still failing, return a clear JSON error and fallback numeric defaults (e.g. `0`) so the dashboard doesn’t break.

6. **Scheduler Hardening**  
   - Wrap your scheduled tasks (`node-schedule` or setInterval) callbacks in `try/catch` so that a single failure doesn’t stop the scheduler.  
   - On failure, log the full stack and schedule a retry after a short delay.

**Deliverables:**  
- Updated service files with console logs for each request/response.  
- Updated Supabase calls with write/read logs.  
- New `routes/health.js` exposing `/api/health/internal`.  
- Refactored `routes/ml.js` that isolates ML errors.  
- Validation & null-safety in ML endpoints.  
- A short README update explaining how to use the new health check and interpret logs.
