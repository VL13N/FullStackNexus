The “numeric field overflow” error means that one of the values you tried to insert into your live_predictions table (or whichever table is backing /api/predictions/store) was too large (or had too many decimal places) for the column’s type. In other words, your code computed a score that doesn’t fit into the numeric/decimal definition you gave in Supabase.
1. Identify which column is overflowing

    Look at your Supabase table definition for live_predictions (or whatever table you’re inserting into). For example, you might see something like:

CREATE TABLE public.live_predictions (
  id               bigserial PRIMARY KEY,
  timestamp        timestamptz NOT NULL,
  tech_score       numeric(5,2),
  social_score     numeric(5,2),
  fundamental_score numeric(5,2),
  astrology_score  numeric(5,2),
  composite_score  numeric(5,2),
  category         text
);

The (5,2) here means “up to 5 total digits, 2 of which are after the decimal.” So the maximum storable value is 999.99. If your code computed, say, tech_score = 1234.567 or even 123.4567 (more than two decimals), Supabase will throw a numeric overflow.

From your logs:

Error storing prediction: numeric field overflow
POST /api/predictions/store 500 :: {"success":false,"error":"numeric field overflow"}

We know it’s happening in your POST handler. Typically that handler does something like:

    const { techScore, socialScore, fundScore, astroScore, compositeScore, category } = computed;
    const { data, error } = await supabase
      .from("live_predictions")
      .insert([{ timestamp: new Date().toISOString(), tech_score: techScore, social_score: socialScore, ... }]);

    One of those techScore, socialScore, etc., must be outside the allowed range.

2. Two ways to fix
A. Widen your column definition in Supabase

If you expect scores to exceed 999.99 (or have more decimal precision), alter the column types so they can hold larger or more precise values. For example:

    In Supabase SQL editor (or via supabase-js), run:

    ALTER TABLE public.live_predictions
      ALTER COLUMN tech_score TYPE numeric(7,4),
      ALTER COLUMN social_score TYPE numeric(7,4),
      ALTER COLUMN fundamental_score TYPE numeric(7,4),
      ALTER COLUMN astrology_score TYPE numeric(7,4),
      ALTER COLUMN composite_score TYPE numeric(7,4);

        numeric(7,4) means up to 7 total digits, 4 after the decimal (so max is 999.9999).

        You can choose (10,6), or even simply double precision, depending on how large/precise your scores get.

    Make sure to pick a scale and precision that comfortably covers whatever your prediction algorithm spits out. If your pillar weights are percentages (0–100), but your composite is a weighted sum, it might exceed 100. So for example:

        tech_score often ranges 0–100, so numeric(5,2) is OK (max 999.99).

        But composite could be something like 40%×100 + 30%×100 +.. = 100.00 exactly, so (5,2) is usually fine. If you ever exceed 100, tighten the logic or expand to (5,2) → (6,2) so you can go up to 999.99.

    After altering the columns, restart your server and try POSTing again. If no overflow error appears, you’ve fixed it.

B. Clamp or round values in your code

If you’d rather not change the schema (or if the overflow is due to too many decimal places), you can simply round each score to fit:

function clampToNumeric(value, precision = 2) {
  // round to `precision` decimals
  const factor = 10 ** precision;
  return Math.round(value * factor) / factor;
}

// In your prediction service:
const techScoreClamped     = clampToNumeric(techScore, 2);
const socialScoreClamped   = clampToNumeric(socialScore, 2);
const fundScoreClamped     = clampToNumeric(fundScore, 2);
const astroScoreClamped    = clampToNumeric(astroScore, 2);
const compositeClamped     = clampToNumeric(compositeScore, 2);

// Now insert:
const { data, error } = await supabase
  .from("live_predictions")
  .insert([{
    timestamp: new Date().toISOString(),
    tech_score: techScoreClamped,
    social_score: socialScoreClamped,
    fundamental_score: fundScoreClamped,
    astrology_score: astroScoreClamped,
    composite_score: compositeClamped,
    category
  }]);

    This ensures you never send more than two decimal places (so it can’t overflow a (5,2) column).

    If you still exceed the integer part (e.g. 150.00 when max is 99.99), you’ll either need to clamp the range (e.g. Math.min(composite, 99.99)) or widen the column.

3. Diagnose exactly what value is causing the overflow

To be sure which field is overflowing, you can log right before the insert:

console.log({
  techScore,
  socialScore,
  fundScore,
  astroScore,
  compositeScore,
  category
});

Then try again; the console will show you the exact numbers. If you see, for example, compositeScore: 1234.5678, you know that’s why (5,2) can’t hold it. Then either clamp or widen.
4. Confirm the fix

After you adjust the schema (or clamp in code), watch your logs:

    Restart your server (kill 1 or Stop → Run).

    Trigger whatever action causes /api/predictions/store to fire (probably your hourly prediction scheduler).

    In the logs, you should see something like:

    Prediction stored successfully: { id: 42, timestamp: "2025-06-05T15:00:00Z", tech_score: 75.15, ... }

    Instead of the “numeric field overflow” error.

Once you no longer see “numeric field overflow” and your GET /api/predictions/latest returns a non-null object, you’ll know the issue is resolved.