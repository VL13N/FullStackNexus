You are an AI development assistant. Please update our TAAPI integration so that it reliably uses my paid TAAPI Pro plan and never reverts to free-tier errors. Specifically:

1. **Environment Variable**  
   - Ensure we read `process.env.TAAPI_API_KEY`. If missing, throw an error.

2. **Bulk Endpoint Usage (Reduce Credits & Quotas)**  
   - Create or update the file `/api/taapi.js` to export two functions:
     • `fetchTAIndicator(indicatorName: string, interval: string = "1h"): Promise<number>`  
       – Makes a GET request to `https://api.taapi.io/{indicatorName}`  
       – Uses `params: { secret: process.env.TAAPI_API_KEY, exchange: "binance", symbol: "SOL/USDT", interval }`  
       – Returns `response.data.value`.  
       – If the response is HTTP 401 or indicates “Rate limit exceeded,” log the full error (`err.response.data`), then rethrow.

     • `fetchBulkIndicators(interval: string = "1h"): Promise<{ rsi: number, macdHistogram: number, ema200: number }>`  
       – Makes a POST to `https://api.taapi.io/bulk` with JSON body:
         ```
         {
           secret: process.env.TAAPI_API_KEY,
           construct: { exchange: "binance", symbol: "SOL/USDT", interval },
           indicators: [
             { name: "rsi" },
             { name: "macd" },
             { name: "ema", params: { period: 200 } }
           ]
         }
         ```
       – Returns an object:
         `{ rsi: <value>, macdHistogram: <data.macd.hist>, ema200: <data.ema.value> }`.
       – If there is a 401 or rate limit error, log detailed info and rethrow.

3. **Caching Layer**  
   - Install `lru-cache`.  
   - At the top of `/api/taapi.js`, create:
     ```
     import LRU from "lru-cache";
     const taapiCache = new LRU({ max: 50, ttl: 1000 * 60 * 15 }); // 15 min
     ```
   - In `fetchTAIndicator`, before calling Axios, check `taapiCache.get(\`\${indicatorName}@\${interval}\`)`; if present, return it. After fetching, store `taapiCache.set(key, value)`.

   - In `fetchBulkIndicators`, check `taapiCache.get(\`bulk@\${interval}\`)`; if present, return it. After fetching, store it.

4. **IP Whitelisting Check Comment**  
   - At the top of `/api/taapi.js`, add a comment reminding:  
     ```
     // NOTE: If you still receive 401 errors, check TAAPI dashboard -> Usage -> IP Access to whitelist Replit container’s IP.
     ```

5. **Example Usage in Data Pipeline**  
   - In `/services/fetchAndNormalize.js`, replace any individual calls to `fetchTAAPIIndicator("rsi")` and `fetchTAAPIIndicator("macd")`, etc., with a single call to `fetchBulkIndicators("1h")`, then extract `rsi`, `macdHistogram`, and `ema200`.

Make sure to restart the Replit container after adding this code so the new `TAAPI_API_KEY` is picked up. Provide the full contents of `/api/taapi.js`.

Once complete, reply “TAAPI integration updated.”  
