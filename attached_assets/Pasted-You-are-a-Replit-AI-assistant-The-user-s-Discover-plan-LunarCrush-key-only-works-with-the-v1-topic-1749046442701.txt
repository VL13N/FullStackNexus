You are a Replit AI assistant. The user’s Discover-plan LunarCrush key only works with the v1 “topic‐news” endpoint, not the legacy `/v2?data=news` call. Please update the Phase 7 code so that `fetchAndScoreNews()` and its test use `/topic/solana/news/v1` instead of the v2 URL. Follow these steps exactly:

---

## 1. Update `services/openaiIntegration.js`

1. **Replace the v2 news URL**  
   - Find the line in `fetchAndScoreNews()` where it builds:
     ```js
     const url = `https://api.lunarcrush.com/v2?data=news&key=${process.env.LUNARCRUSH_API_KEY}&symbol=SOL&limit=20`;
     ```
   - Change it to use the v1 “topic news” endpoint:
     ```js
     const url = `https://api.lunarcrush.com/v1/topic/solana/news/v1?key=${process.env.LUNARCRUSH_API_KEY}&limit=20`;
     ```
   - Remove any `symbol=` parameter, since v1 uses `topic/solana`.

2. **Adjust JSON parsing if needed**  
   - The v1 endpoint responds with `{ status: { ... }, data: [ { id, title, posted, ... }, … ] }`.  
   - Ensure `const newsItems = newsJson.data.map(n => n.title);` still works.

3. **Keep the DNS‐lookup fallback logic** (if previously added) unchanged, but point at the same hostname without `/v2`.

4. **Final `fetchAndScoreNews()` should look like this:**
   ```js
   import dns from "dns/promises";
   import fetch from "node-fetch";
   import OpenAI from "openai";
   import { supabase } from "../supabaseClient.js";

   const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

   async function checkLunarCrushDNS() {
     try {
       await dns.lookup("api.lunarcrush.com");
       return true;
     } catch {
       return false;
     }
   }

   export async function fetchAndScoreNews() {
     const key = process.env.LUNARCRUSH_API_KEY;
     if (!key) throw new Error("LUNARCRUSH_API_KEY is undefined");

     // 1. DNS connectivity check
     const canResolve = await checkLunarCrushDNS();
     if (!canResolve) {
       console.error("LunarCrush DNS lookup failed for api.lunarcrush.com. Skipping news scoring.");
       return [];
     }

     // 2. Fetch v1 news from “topic/solana”
     const url = `https://api.lunarcrush.com/v1/topic/solana/news/v1?key=${key}&limit=20`;
     let newsJson;
     try {
       const res = await fetch(url);
       if (!res.ok) {
         console.error("LunarCrush news returned HTTP", res.status);
         return [];
       }
       newsJson = await res.json();
     } catch (err) {
       console.error("LunarCrush fetch error:", err.message || err);
       return [];
     }

     if (!Array.isArray(newsJson.data) || newsJson.data.length === 0) {
       console.log("fetchAndScoreNews(): no headlines returned from v1 endpoint.");
       return [];
     }

     // 3. Extract titles
     const headlines = newsJson.data.map((n) => n.title);

     // 4. Build OpenAI prompt
     const prompt = `
Given these Solana news headlines (1–20):
${headlines.map((h, i) => `${i + 1}. ${h}`).join("\n")}

Score each headline from -100 (extremely bearish) to +100 (extremely bullish) for Solana’s short‐term price impact. Return a JSON array:
[
  { "headline": "<text>", "score": <number>, "justification": "<brief text>" },
  …
]
     `;

     // 5. Call GPT-4
     let scored;
     try {
       const completion = await openai.chat.completions.create({
         model: "gpt-4",
         messages: [{ role: "user", content: prompt }],
         temperature: 0.2
       });
       scored = JSON.parse(completion.choices[0].message.content);
     } catch (err) {
       console.error("OpenAI scoring error:", err.message || err);
       return [];
     }

     // 6. Insert into Supabase
     for (const item of scored) {
       try {
         await supabase.from("news_scores").insert({
           timestamp: new Date().toISOString(),
           headline: item.headline,
           score: item.score,
           justification: item.justification
         });
       } catch (err) {
         console.error("Supabase insert error:", err.message || err);
       }
     }

     return scored;
   }

2. Update /scripts/testLunarNews.js

Replace the v2 URL with v1:

// /scripts/testLunarNews.js
import fetch from "node-fetch";

async function testNews() {
  const key = process.env.LUNARCRUSH_API_KEY;
  if (!key) {
    console.error("Error: LUNARCRUSH_API_KEY is undefined");
    process.exit(1);
  }
  const url = `https://api.lunarcrush.com/v1/topic/solana/news/v1?key=${key}&limit=5`;
  console.log("Calling LunarCrush v1 news endpoint:");
  console.log(url);
  try {
    const res = await fetch(url);
    console.log("HTTP status:", res.status);
    const json = await res.json();
    if (json && Array.isArray(json.data)) {
      console.log("Received", json.data.length, "news items. Sample:");
      console.log(JSON.stringify(json.data.slice(0, 3), null, 2));
    } else {
      console.error("Unexpected response format:", JSON.stringify(json, null, 2));
    }
  } catch (err) {
    console.error("Network or JSON error:", err.message || err);
  }
  process.exit(0);
}

testNews();

3. Update /scripts/testFetchAndScoreNews.js

No functional changes beyond expecting the v1 logic. Ensure it calls the updated fetchAndScoreNews():

// /scripts/testFetchAndScoreNews.js
import { fetchAndScoreNews } from "../services/openaiIntegration.js";

async function runTest() {
  console.log("Testing fetchAndScoreNews()");
  try {
    const scored = await fetchAndScoreNews();
    if (Array.isArray(scored) && scored.length === 0) {
      console.log("fetchAndScoreNews(): returned [] (no headlines or skipped).");
    } else {
      console.log("fetchAndScoreNews() returned:", JSON.stringify(scored, null, 2));
    }
  } catch (err) {
    console.error("Error in fetchAndScoreNews():", err.message || err);
  }
  process.exit(0);
}

runTest();

4. After Making Changes

    Restart the Replit container so the new LunarCrush v1 key and code load.

    Run the environment check to confirm both keys are set:

node scripts/checkEnv.js

Test the raw v1 news fetch:

node scripts/testLunarNews.js

    Expect an HTTP 200 and an array of up to 5 items.

Test the combined scoring function:

    node scripts/testFetchAndScoreNews.js

        Expect either [] (if no news or DNS issues) or a JSON array of { headline, score, justification }.

Once complete, reply:

LunarCrush v1 news endpoint integrated.

