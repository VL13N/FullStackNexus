You are an AI assistant. Our code currently fails to import `@supabase/supabase-js`, causing normalization to fall back to defaults. Please update the project so that Supabase is correctly installed and used. Do the following:

1. **Install the Supabase client package**  
   - Add `@supabase/supabase-js` to `package.json` dependencies.  
   - Ensure it is installed by running `npm install @supabase/supabase-js`.  

2. **Update `services/normalize.js`**  
   Replace the existing file with the following code, which connects to Supabase and loads normalization bounds:

   ```js
   // services/normalize.js
   import { createClient } from "@supabase/supabase-js";

   const SUPABASE_URL = process.env.SUPABASE_URL;
   const SUPABASE_KEY = process.env.SUPABASE_KEY;

   if (!SUPABASE_URL || !SUPABASE_KEY) {
     console.error(
       "Missing SUPABASE_URL or SUPABASE_KEY. Using default normalization bounds."
     );
     export async function initializeNormalization() {
       console.log("Using default normalization bounds.");
       global.normBounds = {};
     }
     export function normalizeMetrics(raw) {
       const out = {};
       for (const [metric, value] of Object.entries(raw)) {
         out[metric] = 50;
       }
       return out;
     }
   } else {
     const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
     let normBounds = {};

     export async function initializeNormalization() {
       console.log("Initializing normalization bounds from Supabase…");
       try {
         const { data: names, error: namesErr } = await supabase
           .from("historical_metrics")
           .select("metric_name", { distinct: true });

         if (namesErr) throw namesErr;

         for (const row of names) {
           const metric = row.metric_name;
           const { data: stats, error: statErr } = await supabase
             .from("historical_metrics")
             .select("MIN(raw_value) as min, MAX(raw_value) as max")
             .eq("metric_name", metric)
             .single();

           if (statErr) {
             console.error(`Error fetching bounds for ${metric}:`, statErr.message);
             continue;
           }
           normBounds[metric] = { min: stats.min, max: stats.max };
         }

         global.normBounds = normBounds;
         console.log("Normalization bounds loaded for", Object.keys(normBounds));
       } catch (err) {
         console.error("Error initializing normalization:", err.message || err);
         global.normBounds = {};
       }
     }

     export function normalizeMetrics(raw) {
       const out = {};
       for (const [metric, value] of Object.entries(raw)) {
         const bounds = global.normBounds[metric];
         if (!bounds || bounds.max === bounds.min) {
           out[metric] = 50;
         } else {
           const { min, max } = bounds;
           const score = ((value - min) / (max - min)) * 100;
           out[metric] = Math.max(0, Math.min(100, score));
         }
       }
       return out;
     }
   }

    Verify environment variables

        Ensure SUPABASE_URL and SUPABASE_KEY are set in Replit Secrets.

        If missing, add them and restart the container.

    Create a test script at scripts/testSupabase.js:

// scripts/testSupabase.js
import { createClient } from "@supabase/supabase-js";

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error("Missing SUPABASE_URL or SUPABASE_KEY");
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

async function ping() {
  const { data, error } = await supabase
    .from("historical_metrics")
    .select("*")
    .limit(1);
  if (error) {
    console.error("Supabase query error:", error.message);
  } else {
    console.log("Supabase query succeeded. Sample row:", data[0] || "none");
  }
  process.exit(0);
}

ping();

Restart the Replit container and run:

    node scripts/testSupabase.js

    Confirm you see either a sample row or “none” without errors.

Provide the updated package.json, services/normalize.js, and the new scripts/testSupabase.js. Once complete, reply “Supabase integration fixed.”

