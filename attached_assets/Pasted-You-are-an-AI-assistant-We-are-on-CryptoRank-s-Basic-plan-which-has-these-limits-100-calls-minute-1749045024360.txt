You are an AI assistant. We are on CryptoRank’s Basic plan, which has these limits: 100 calls/minute, 5 000 call credits per day, and 100 000 per month. Please update our CryptoRank service code so that it automatically respects these rate limits by:

1. **Caching** most responses to minimize repeated calls:
   - Use `lru-cache` or equivalent with a 30-minute TTL for endpoints that update frequently (global, currencies list, categories, tags, fiat list).
   - Use a 1-hour TTL for historical price data (since Basic allows up to 30 days of 5-minute granularity; we only need hourly or daily retrieval).
   - Use a 6-hour TTL for endpoints like `/currencies/map` that rarely change.

2. **Throttling** calls so we never exceed 100 calls per minute:
   - Wrap all Axios/`fetch` calls in a simple rate‐limiter that checks elapsed time between calls. For example, track a sliding window of timestamps and if 100 calls have been made in the last 60 seconds, pause additional calls until the next second.
   - Implement this limiter in a shared helper (e.g. `services/cryptoRankLimiter.js`) and import it in each fetch function.

3. **Updating `/services/cryptoRankExtended.js`**:
   - At the top, require/import a rate‐limit helper:
     ```js
     import { rateLimit } from './cryptoRankLimiter.js';
     ```
   - Before every Axios GET, call `await rateLimit()` so that no more than 100 calls in any rolling 60 second window.
   - Ensure the cache logic is applied first: check the cache key, and if a cached value exists, return it immediately without calling `rateLimit` or the network.

4. **Adjusting Historical Data Fetch (`fetchSolanaHistorical`)**:
   - Because Basic plan allows 5 000 credits/day, fetching a full 30-day history (with 5 min interval) could cost many credits. Instead:
     - Default to `interval='1h'` (one call credit per hour‐candlestick) to stay within budget.
     - If the user explicitly requests `interval='5m'`, reject or warn (e.g., throw an error saying “5 min interval is not supported on Basic; please use interval='1h' or upgrade plan”).
   - Cache the hourly history for at least 1 hour (so repeated calls within that hour are free).

5. **Updating Other Fetch Functions**:
   - For each function—`fetchGlobalMarket`, `fetchCurrencyMap`, `fetchCategories`, `fetchTags`, `fetchFiatList`, `fetchCurrencies`, `fetchCurrencyById`, `fetchFullMetadata`, `fetchSparkline`, `searchCurrencies`—wrap the network call with:
     ```js
     await rateLimit();
     const response = await axios.get(…);
     ```
   - Use a short TTL (e.g., 30 minutes) for global, map, categories, tags, fiat; 1 hour for `fetchCurrencies` and `fetchCurrencyById`; and longer TTL (6 hours) for static data like map and categories, because they rarely change.

6. **Creating `services/cryptoRankLimiter.js`**:
   - Implement a simple in-memory rate limiter. For example:
     ```js
     // /services/cryptoRankLimiter.js
     const callTimestamps = [];

     export async function rateLimit() {
       const now = Date.now();
       // Remove timestamps older than 60 seconds
       while (callTimestamps.length && now - callTimestamps[0] >= 60_000) {
         callTimestamps.shift();
       }
       if (callTimestamps.length >= 100) {
         // Wait until enough time has passed
         const wait = 60_000 - (now - callTimestamps[0]) + 10; // add a 10ms buffer
         await new Promise((r) => setTimeout(r, wait));
         return rateLimit(); // recursively check again
       }
       callTimestamps.push(now);
       return;
     }
     ```
   - This ensures we never fire more than 100 calls/minute.

7. **Add Comments Warning About Daily Credit Usage**:
   - In `cryptoRankExtended.js` near `fetchSolanaHistorical`, add:
     ```js
     // NOTE: On Basic plan, fetching 1h interval history costs 24 credits/day; 
     // do not request 5m interval (costs 288 credits/day) unless you upgrade.
     ```
   - In `fetchCurrencies`, comment:
     ```js
     // Warning: Using page=1,limit=50 costs 50 credits. 
     // Cache result for 30 minutes to avoid re‐requesting too frequently.
     ```

8. **Once all changes are implemented**:
   - Restart the Replit container so environment variables and new code are loaded.
   - In the code comments, remind future developers: “Basic plan quotas: 100 calls/min, 5 000 credits/day. All calls must be cached or passed through `rateLimit()`.”

Provide the complete updated contents of:
- `/services/cryptoRankLimiter.js`
- `/services/cryptoRankExtended.js`

including all `import` statements, cache initialization, and `rateLimit` integration. Once done, reply “CryptoRank Basic plan limits enforced.”  
